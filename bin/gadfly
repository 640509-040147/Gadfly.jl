#!/usr/bin/env julia

# A gadfly executable that takes executable markdown files,
# excecutes them, and renders them into self contained html files.

pkgdir = Pkg.dir("Gadfly")
include("$(pkgdir)/src/Gadfly.jl")
using Gadfly

using ArgParse

ap = ArgParseSettings("Excute an executable markdown file")

@add_arg_table ap begin
    "filename"
        arg_type = String
        help = "input filename"
        required = true
    "--from"
        arg_type = String
        default = "markdown"
        help = "input format"
    "--to"
        arg_type = String
        default = "html5"
        help = "input format"
    "--standalone"
        action = :store_true
    "--self-contained"
        action = :store_true
    "--toc"
        help = "generate a table of contents"
        action = :store_true
    "--template"
        help = "use the given template"
        arg_type = String
    "--css"
        help = "include the given stylesheet in an html file"
        arg_type = String
    "--variable"
        help = "pass key/value pairs to a template"
        action = :append_arg
end

parsed_args = ArgParse.parse_args(ap)

pandoc_args = String[]
if parsed_args["standalone"]
    push(pandoc_args, "--standalone")
end

if parsed_args["self-contained"]
    push(pandoc_args, "--self-contained")
end

if parsed_args["toc"]
    push(pandoc_args, "--toc")
end

if !is(parsed_args["css"], nothing)
    push(pandoc_args, "--css=" * parsed_args["css"])
end

if !is(parsed_args["template"], nothing)
    push(pandoc_args, "--template=" * parsed_args["template"])
end

for keyval in parsed_args["variable"]
    push(pandoc_args, "--variable=$(keyval)")
end

output = weave(parsed_args["filename"],
               parsed_args["from"],
               parsed_args["to"],
               pandoc_args...)

println(output)

